#version 330 core

uniform sampler2D shadowMap;
uniform sampler2D tex;
uniform vec3 LightPosition_worldspace;
uniform int is_First_f;

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 ShadowCoord;

out vec4 color;
out float fragmentdepth;


void main()
{
	if(is_First_f  == 0)
	{
		//Light emission properties
		vec3 LightColor = vec3(1,1,1);
		float LightPower = 0.05f;
	
		//Material properties
		vec3 MaterialDiffuseColor = texture2D( tex, UV ).rgb;
		vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
		vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

		//Distance to the light
		float distance = length( LightPosition_worldspace - Position_worldspace );

		//Normal of the computed fragment, in camera space
		vec3 n = normalize( Normal_cameraspace );
		//Direction of the light (from the fragment to the light)
		vec3 l = normalize( LightDirection_cameraspace );
		//Cosine of the angle between the normal and the light direction, 
		//clamped above 0
		//- light is at the vertical of the triangle -> 1
		//- light is perpendicular to the triangle -> 0
		//- light is behind the triangle -> 0
		float cosTheta = clamp( dot( n,l ), 0,1 );

		//Eye vector (towards the camera)
		vec3 E = normalize(EyeDirection_cameraspace);
		//Direction in which the triangle reflects the light

		vec3 R = reflect(-l,n);
		//Cosine of the angle between the Eye vector and the Reflect vector,
		//clamped to 0
		//- Looking into the reflection -> 1
		//- Looking elsewhere -> < 1
		float cosAlpha = clamp( dot( E,R ), 0,1 );
		
		float shadowValue=0;
		vec4 shadowCoordinate2 = ShadowCoord;
		shadowCoordinate2 /= shadowCoordinate2.w;
		shadowCoordinate2 /= shadowCoordinate2.w;
		for(float x = -0.001; x <= 0.001; x += 0.0005)
		{	
			for(float y = -0.001; y <= 0.001; y += 0.0005)
			{
				if(texture2D(shadowMap,shadowCoordinate2.xy).r >= shadowCoordinate2.z)
				{
					shadowValue += 1.0;
				}
			}
		}
		
		//vec3 temp = MaterialAmbientColor + MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) + MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
		//color = vec4(temp,0);
		//color = shadowMap.xy;
		//color = vec4(1-distance/50,1-distance/50,1-distance/50,0);
		//color = vec4(shadowValue,shadowValue,shadowValue,1);
		//color = vec4(texture2D( shadowMap, UV ).rgb,0);
		//color = vec4(gl_FragCoord.z,gl_FragCoord.z,gl_FragCoord.z,0);

		vec3 temp = MaterialAmbientColor + shadowValue * MaterialDiffuseColor * LightColor * LightPower * cosTheta+ shadowValue * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5);
		color = vec4(temp,0);
	}
	else
	{
		fragmentdepth=gl_FragCoord.z;
	}
}